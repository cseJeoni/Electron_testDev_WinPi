import Panel from "./Panel"
import { Button } from "./Button"

export default function JudgePanel({ onJudge, isStarted, onReset, camera1Ref, camera2Ref, hasNeedleTip = true }) {
  // ÎãàÎì§ DOWN Î™ÖÎ†π Ï†ÑÏÜ° Ìï®Ïàò
  const sendNeedleDown = () => {
    try {
      const needleWs = new WebSocket('ws://192.168.0.122:8765')
      needleWs.onopen = () => {
        console.log('ÌåêÏ†ï ÌõÑ ÎãàÎì§ DOWN Î™ÖÎ†π Ï†ÑÏÜ°')
        needleWs.send(JSON.stringify({ cmd: "move", position: 0, mode: "position" })) // ÎãàÎì§ DOWN
        needleWs.close()
      }
    } catch (error) {
      console.error('ÎãàÎì§ DOWN Î™ÖÎ†π Ï†ÑÏÜ° Ïã§Ìå®:', error)
    }
  }

  // EEPROM Îç∞Ïù¥ÌÑ∞ ÏùΩÍ∏∞ Ìï®Ïàò
  const readEepromData = async () => {
    try {
      console.log('üìñ EEPROM Îç∞Ïù¥ÌÑ∞ ÏùΩÍ∏∞ ÏãúÏûë...')
      const ws = new WebSocket('ws://192.168.0.122:8765')
      
      const eepromData = await new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          ws.close()
          reject(new Error('EEPROM ÏùΩÍ∏∞ ÌÉÄÏûÑÏïÑÏõÉ'))
        }, 5000)
        
        ws.onopen = () => {
          console.log('üì° EEPROM ÏùΩÍ∏∞ WebSocket Ïó∞Í≤∞Îê®')
          ws.send(JSON.stringify({ cmd: "eeprom_read" }))
        }
        
        ws.onmessage = (event) => {
          try {
            const response = JSON.parse(event.data)
            console.log('üìñ EEPROM ÏùëÎãµ:', response)
            
            if (response.type === 'eeprom_read') {
              clearTimeout(timeout)
              ws.close()

              // DataSettingsPanelÏùò Í≤ÄÏ¶ùÎêú Î∞©ÏãùÏúºÎ°ú ÏàòÏ†ï
              if (response.result && response.result.success) {
                console.log('‚úÖ EEPROM Îç∞Ïù¥ÌÑ∞ ÏùΩÍ∏∞ ÏÑ±Í≥µ:', response.result);
                resolve(response.result);
              } else {
                console.error('‚ùå EEPROM ÏùΩÍ∏∞ Ïã§Ìå®:', response.result?.error || 'Í≤∞Í≥º Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå');
                resolve(null);
              }
            }
          } catch (error) {
            console.error('‚ùå EEPROM ÏùëÎãµ ÌååÏã± Ïã§Ìå®:', error)
            clearTimeout(timeout)
            ws.close()
            resolve(null)
          }
        }
        
        ws.onerror = (error) => {
          console.error('‚ùå EEPROM WebSocket Ïò§Î•ò:', error)
          clearTimeout(timeout)
          ws.close()
          resolve(null)
        }
      })
      
      return eepromData
    } catch (error) {
      console.error('‚ùå EEPROM Îç∞Ïù¥ÌÑ∞ ÏùΩÍ∏∞ Ïã§Ìå®:', error)
      return null
    }
  }

  // ÌåêÏ†ï Í≤∞Í≥ºÎ•º Î∞õÏïÑ Ïä§ÌÅ¨Î¶∞ÏÉ∑ÏùÑ Ï†ÄÏû•ÌïòÎäî Ìï®Ïàò
  const saveScreenshot = async (judgeResult, cameraRef, eepromData) => {
    if (!cameraRef.current) {
      console.error('Ïπ¥Î©îÎùº refÍ∞Ä ÏóÜÏäµÎãàÎã§.');
      return;
    }

    // judgeResultÏôÄ eepromDataÎ•º captureImageÎ°ú Ï†ÑÎã¨
    const imageData = await cameraRef.current.captureImage(judgeResult, eepromData);

    if (imageData) {
      const blob = await (await fetch(imageData)).blob();
      const buffer = Buffer.from(await blob.arrayBuffer());
      const cameraTitle = cameraRef.current.getTitle(); // refÏóêÏÑú ÏßÅÏ†ë title Í∞ÄÏ†∏Ïò§Í∏∞
      const date = new Date();
      const formattedDate = `${date.getFullYear()}${(date.getMonth() + 1).toString().padStart(2, '0')}${date.getDate().toString().padStart(2, '0')}`;
      const formattedTime = `${date.getHours().toString().padStart(2, '0')}${date.getMinutes().toString().padStart(2, '0')}${date.getSeconds().toString().padStart(2, '0')}`;
      const fileName = `${formattedDate}_${formattedTime}_${cameraTitle}_${judgeResult}.png`;

      const fs = window.require('fs');
      const path = window.require('path');
      const baseDir = judgeResult === 'NG' ? 'C:\\Inspect\\NG' : 'C:\\Inspect\\PASS';
      if (!fs.existsSync(baseDir)) {
        fs.mkdirSync(baseDir, { recursive: true });
      }
      const savePath = path.join(baseDir, fileName);

      fs.writeFileSync(savePath, buffer);
      console.log(`‚úÖ ${fileName} Ï†ÄÏû• ÏôÑÎ£å: ${savePath}`);
    } else {
      console.error('‚ùå Ïù¥ÎØ∏ÏßÄ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏñ¥ ÌååÏùºÏùÑ Ï†ÄÏû•Ìï† Ïàò ÏóÜÏäµÎãàÎã§.');
    }
  };

  // ÌåêÏ†ï Î°úÏßÅÏùÑ Ï≤òÎ¶¨ÌïòÎäî Ï§ëÏïô Ìï®Ïàò
  const handleJudge = async (result) => {
    try {
      // 1. EEPROM Îç∞Ïù¥ÌÑ∞ ÏùΩÍ∏∞ (ÏôÑÎ£åÎê† ÎïåÍπåÏßÄ Í∏∞Îã§Î¶º)
      console.log('üì° EEPROM Îç∞Ïù¥ÌÑ∞ ÏùΩÍ∏∞ ÏãúÏûë...');
      const eepromData = await readEepromData();
      console.log('‚úÖ EEPROM Îç∞Ïù¥ÌÑ∞ ÏùΩÍ∏∞ ÏôÑÎ£å:', eepromData);

      // 2. ÏñëÏ™Ω Ïπ¥Î©îÎùºÏóê ÎåÄÌï¥ Ïä§ÌÅ¨Î¶∞ÏÉ∑ Ï†ÄÏû•
      await saveScreenshot(result, camera1Ref, eepromData);
      await saveScreenshot(result, camera2Ref, eepromData);

      // ÎãàÎì§ DOWN
      sendNeedleDown()
      
      // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
      if (onReset) onReset()
      
      // ÏΩúÎ∞± Ìò∏Ï∂ú
      if (onJudge) onJudge(result)

    } catch (error) {
      console.error(`‚ùå ${result} ÌåêÏ†ï Ï≤òÎ¶¨ Ï§ë ÏóêÎü¨ Î∞úÏÉù:`, error);
    }
  };

  const handleNGClick = () => {
    console.log("NG ÌåêÏ†ï");
    handleJudge('NG');
  };

  const handlePassClick = () => {
    console.log("PASS ÌåêÏ†ï");
    handleJudge('PASS');
  };

  return (
    <Panel title="ÌåêÏ†ï">
      <div style={{ display: 'flex', gap: '1dvw', height: '100%' }}>
        {/* NG Î≤ÑÌäº */}
        <Button
          onClick={handleNGClick}
          disabled={!isStarted || !hasNeedleTip}
          style={{
            flex: 1,
            backgroundColor: (isStarted && hasNeedleTip) ? '#C22727' : '#6B7280',
            color: 'white',
            fontSize: '2dvh',
            fontWeight: 'bold',
            border: 'none',
            borderRadius: '0.375rem',
            cursor: (isStarted && hasNeedleTip) ? 'pointer' : 'not-allowed',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            height: '30dvh',
            opacity: (isStarted && hasNeedleTip) ? 1 : 0.6
          }}
        >
          NG
        </Button>
        
        {/* PASS Î≤ÑÌäº */}
        <Button
          onClick={handlePassClick}
          disabled={!isStarted || !hasNeedleTip}
          style={{
            flex: 1,
            backgroundColor: (isStarted && hasNeedleTip) ? '#0CB56C' : '#6B7280',
            color: 'white',
            fontSize: '2dvh',
            fontWeight: 'bold',
            border: 'none',
            borderRadius: '0.375rem',
            cursor: (isStarted && hasNeedleTip) ? 'pointer' : 'not-allowed',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            height: '30dvh',
            opacity: (isStarted && hasNeedleTip) ? 1 : 0.6
          }}
        >
          PASS
        </Button>
      </div>
    </Panel>
  )
}
